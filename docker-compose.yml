# Docker Compose configuration for MASX AI ETL CPU Pipeline
# Includes the main application and supporting services

version: '3.8'

services:
  # Main application service
  masx-etl-pipeline:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: masx-etl-pipeline
    ports:
      - "8000:8000"
    environment:
      # Supabase Configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}

      # Database Configuration
      - DB_HOST=${DB_HOST:-localhost}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}

      # API Keys
      - BING_SEARCH_API_KEY=${BING_SEARCH_API_KEY}
      - DUCKDUCKGO_API_KEY=${DUCKDUCKGO_API_KEY}

      # Pipeline Configuration
      - MAX_WORKERS=${MAX_WORKERS:-32}
      - BATCH_SIZE=${BATCH_SIZE:-100}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
      - RETRY_ATTEMPTS=${RETRY_ATTEMPTS:-3}
      - RETRY_DELAY=${RETRY_DELAY:-1.0}

      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}

      # Server Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=${DEBUG:-false}

      # Processing Configuration
      - ENABLE_IMAGE_SEARCH=${ENABLE_IMAGE_SEARCH:-true}
      - ENABLE_GEOTAGGING=${ENABLE_GEOTAGGING:-true}
      - CLEAN_TEXT=${CLEAN_TEXT:-true}
      - MAX_ARTICLE_LENGTH=${MAX_ARTICLE_LENGTH:-50000}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - masx-network
    depends_on:
      - redis
      - postgres

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: masx-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - masx-network

  # PostgreSQL database (optional, if not using Supabase)
  postgres:
    image: postgres:15-alpine
    container_name: masx-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-masx_etl}
      - POSTGRES_USER=${DB_USER:-masx_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-masx_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - masx-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: masx-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    depends_on:
      - masx-etl-pipeline
    networks:
      - masx-network

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: masx-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - masx-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: masx-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - masx-network

# Named volumes for data persistence
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  masx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
